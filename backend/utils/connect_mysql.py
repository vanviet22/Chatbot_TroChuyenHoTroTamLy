import os
import mysql.connector
from dotenv import load_dotenv

load_dotenv()

MYSQL_HOST = os.getenv("MYSQL_HOST")
MYSQL_USER = os.getenv("MYSQL_USER")
MYSQL_PASSWORD = os.getenv("MYSQL_PASSWORD")
MYSQL_DB_NAME = os.getenv("MYSQL_DB_NAME")


class MySQLConnection:
    """L·ªõp ti·ªán √≠ch ƒë·ªÉ k·∫øt n·ªëi MySQL v√† t√°i s·ª≠ d·ª•ng."""

    def __init__(self):
        try:
            self.conn = mysql.connector.connect(
                host=MYSQL_HOST,
                user=MYSQL_USER,
                password=MYSQL_PASSWORD,
                database=MYSQL_DB_NAME
            )
            self.cursor = self.conn.cursor(dictionary=True)
            print(f"‚úÖ K·∫øt n·ªëi MySQL th√†nh c√¥ng t·ªõi database: {MYSQL_DB_NAME}")
        except mysql.connector.Error as err:
            print(f"‚ùå L·ªói k·∫øt n·ªëi MySQL: {err}")
            self.conn = None
            self.cursor = None

    def get_connection(self):
        """Tr·∫£ v·ªÅ (conn, cursor)."""
        return self.conn, self.cursor

    def get_table(self, table_name: str):
        """Tr·∫£ v·ªÅ tuple (conn, cursor, table_name) ƒë·ªÉ module kh√°c d√πng ti·ªán h∆°n."""
        if not self.conn or not self.cursor:
            raise ConnectionError("‚ö†Ô∏è K·∫øt n·ªëi MySQL ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ho·∫∑c ƒë√£ b·ªã ƒë√≥ng.")
        return self.conn, self.cursor, table_name

    def close(self):
        """ƒê√≥ng k·∫øt n·ªëi MySQL."""
        if self.cursor:
            self.cursor.close()
        if self.conn:
            self.conn.close()
        print("üîí ƒê√£ ƒë√≥ng k·∫øt n·ªëi MySQL.")


# Instance k·∫øt n·ªëi to√†n c·ª•c
mysql = MySQLConnection()

def get_table(table_name: str):
    """H√†m ti·ªán √≠ch chung cho m·ªçi b·∫£ng"""
    return mysql.get_table(table_name)

# b·∫£ng cache
def get_cache_table():
    conn, cursor, _ = get_table("cache")
    return conn, cursor
